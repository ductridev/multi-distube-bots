GLOBAL_PREFIX="b!" # Global prefix.
DEFAULT_LANGUAGE="EnglishUS" # Default language for bot
OWNER_IDS=["",""] # Your discord id (You can add multiple ids.).
GUILD_ID="" # Your server ID (If you want to use the bot for a single server).
TOPGG="" # Your Top.gg API key. Obtain this from https://top.gg
KEEP_ALIVE="false" # true for keep alive in https://replit.com
LOG_CHANNEL_ID="" # If you enter this, you will be able to receive the status of Lavalink nodes and guild join/leave logs through the corresponding channel.
LOG_COMMANDS_ID="" # The channel ID where command usage logs will be sent.
DATABASE_URL="" # Your database url (If you want to use sqlite, then you can leave it blank.).
AUTO_NODE="false" # true for auto node. It is given from lavainfo-api (https://lavainfo-api.deno.dev).
SEARCH_ENGINE="YouTubeMusic" # Search engine to be used when playing the song. You can use: YouTube, YouTubeMusic, SoundCloud, Spotify, Apple, Deezer, Yandex and JioSaavn
GENIUS_API="" # Sign up and get your own api at (https://genius.com/) to fetch your lyrics (CLIENT TOKEN)
NODES=[{"id":"Local Node","host":"lavalink","port":2333,"authorization":"youshallnotpass","retryAmount":5,"retryDelay":60000,"secure":"false"}]
REDIS_URL=redis://localhost:6379

# =============================================================================
# SHARDING CONFIGURATION EXAMPLE
# =============================================================================
# Copy the relevant settings to your .env file to enable sharding

# -----------------------------------------------------------------------------
# Sharding Settings
# -----------------------------------------------------------------------------

# Number of shards per bot
# - 'auto' (recommended): Discord.js automatically calculates based on guild count
# - <number>: Fixed number of shards (e.g., 2, 4, 8)
# - Discord recommends ~1000 guilds per shard
SHARDS_PER_BOT=auto

# Shard execution mode
# - 'process' (recommended): Each shard runs in a separate Node.js process
#   → Better isolation, easier debugging, slightly higher memory
# - 'worker': Each shard runs in a worker thread
#   → Lower memory, faster communication, shared resources
SHARD_MODE=process

# Enable periodic shard statistics logging (every 5 minutes)
# - 'true': Log detailed shard metrics (guilds, users, memory, uptime)
# - 'false': Disable statistics logging
SHARD_STATS=true

# Enable sharded mode for PlayerSaver (session management)
# - 'true': Each shard maintains separate session files
# - 'false': All shards share session files
SHARDED=true

# =============================================================================
# EXPECTED RESOURCE USAGE (with 7 bots)
# =============================================================================
#
# Small Scale (< 500 guilds per bot):
#   - 7 bots × 1 shard = 7 processes
#   - Memory: ~1.4 GB (200MB per shard)
#   - CPU: 1-2 cores
#
# Medium Scale (500-2000 guilds per bot):
#   - 7 bots × 2-3 shards = 14-21 processes
#   - Memory: ~2.8-4.2 GB
#   - CPU: 2-4 cores
#
# Large Scale (2000+ guilds per bot):
#   - 7 bots × 4+ shards = 28+ processes
#   - Memory: ~5.6+ GB
#   - CPU: 4+ cores
#
# =============================================================================
# PERFORMANCE BENEFITS
# =============================================================================
#
# Before Sharding:
#   - Each bot: ~500MB RAM, 1 CPU core @ 100%
#   - Max guilds per bot: ~2,500
#   - Restart impact: All guilds offline
#
# After Sharding:
#   - Each shard: ~200MB RAM
#   - CPU usage: Distributed across N cores @ 60%
#   - Max guilds: Unlimited (scales with shards)
#   - Restart impact: Only 1/N shards offline
#
# =============================================================================

# -----------------------------------------------------------------------------
# QUICK START
# -----------------------------------------------------------------------------
# 1. Add the sharding settings above to your .env file
# 2. Build the project: npm run build
# 3. Start the bots: npm start
# 4. Monitor shard startup in the console
# 5. Check shard statistics after 5 minutes (if SHARD_STATS=true)

# -----------------------------------------------------------------------------
# TROUBLESHOOTING
# -----------------------------------------------------------------------------
# - Shards not starting? Ensure 'dist/LavaClient.js' exists (run npm run build)
# - High memory usage? Reduce SHARDS_PER_BOT or use SHARD_MODE=worker
# - Slow startup? Normal - shards spawn with 5.5s delay between each
# - Sessions not restoring? Set SHARDED=true in .env

# For more details, see SHARDING.md
