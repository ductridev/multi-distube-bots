diff --git a/node_modules/@distube/yt-dlp/bin/yt-dlp b/node_modules/@distube/yt-dlp/bin/yt-dlp
new file mode 100644
index 0000000..9d331f2
Binary files /dev/null and b/node_modules/@distube/yt-dlp/bin/yt-dlp differ
diff --git a/node_modules/@distube/yt-dlp/dist/index.d.ts b/node_modules/@distube/yt-dlp/dist/index.d.ts
index 332f649..5d15f51 100644
--- a/node_modules/@distube/yt-dlp/dist/index.d.ts
+++ b/node_modules/@distube/yt-dlp/dist/index.d.ts
@@ -361,16 +361,19 @@ interface YtDlpPlaylist {
 type YtDlpResponse = YtDlpVideo | YtDlpPlaylist;
 interface YtDlpOptions {
     update?: boolean;
+    extractorArgs?: string;
+    cookies?: string;
+    proxy?: string;
 }
 
 declare const json: (url: string, flags?: YtDlpFlags, options?: SpawnOptionsWithoutStdio) => Promise<YtDlpResponse>;
 declare const download: () => Promise<string>;
 
 declare class YtDlpPlugin extends PlayableExtractorPlugin {
-    constructor({ update }?: YtDlpOptions);
+    constructor({ update, cookies, extractorArgs, proxy }?: YtDlpOptions);
     init(distube: DisTube): void;
     validate(): boolean;
-    resolve<T>(url: string, options: ResolveOptions<T>): Promise<YtDlpSong<T> | Playlist<T>>;
+    resolve<T>(url: string, options: ResolveOptions<T>,): Promise<YtDlpSong<T> | Playlist<T>>;
     getStreamURL(song: Song): Promise<string>;
     getRelatedSongs(): never[];
 }
diff --git a/node_modules/@distube/yt-dlp/dist/index.js b/node_modules/@distube/yt-dlp/dist/index.js
index b17b126..8d8a471 100644
--- a/node_modules/@distube/yt-dlp/dist/index.js
+++ b/node_modules/@distube/yt-dlp/dist/index.js
@@ -106,6 +106,7 @@ var getBinary = /* @__PURE__ */ __name(async (url) => {
       url = defaultUrl;
     }
   }
+  console.log(url);
   const response = await makeRequest(url);
   const contentType = response.headers["content-type"]?.toString();
   if (binContentTypes.includes(contentType ?? "")) return { buffer: await response.body.arrayBuffer(), version };
@@ -125,9 +126,12 @@ var YtDlpPlugin = class extends import_distube.PlayableExtractorPlugin {
   static {
     __name(this, "YtDlpPlugin");
   }
-  constructor({ update } = {}) {
+  constructor({ update, cookies, extractorArgs, proxy } = {}) {
     super();
     if (update ?? true) download().catch(() => void 0);
+    this.cookies = cookies;
+    this.extractorArgs = extractorArgs;
+    this.proxy = proxy;
   }
   init(distube) {
     super.init(distube);
@@ -147,8 +151,11 @@ var YtDlpPlugin = class extends import_distube.PlayableExtractorPlugin {
       noCallHome: true,
       preferFreeFormats: true,
       skipDownload: true,
-      simulate: true
-    }).catch((e2) => {
+      simulate: true,
+      cookies: this.cookies,
+      extractorArgs: this.extractorArgs,
+      proxy: this.proxy,
+    }, { shell: true }).catch((e2) => {
       throw new import_distube.DisTubeError("YTDLP_ERROR", `${e2.stderr || e2}`);
     });
     if (isPlaylist(info)) {
@@ -178,8 +185,11 @@ var YtDlpPlugin = class extends import_distube.PlayableExtractorPlugin {
       preferFreeFormats: true,
       skipDownload: true,
       simulate: true,
-      format: "ba/ba*"
-    }).catch((e2) => {
+      format: "ba/ba*",
+      cookies: this.cookies,
+      extractorArgs: this.extractorArgs,
+      proxy: this.proxy,
+    }, { shell: true }).catch((e2) => {
       throw new import_distube.DisTubeError("YTDLP_ERROR", `${e2.stderr || e2}`);
     });
     if (isPlaylist(info)) throw new import_distube.DisTubeError("YTDLP_ERROR", "Cannot get stream URL of a entire playlist");
