// src/commands/playleave.js
/* 
  Command: playleave
  Description: Plays a song or playlist and leaves the voice channel after the song finishes.
  Usage: b!playleave <song name or URL>
  Category: music
  Aliases: pl, pleave
*/

import { Command } from '../@types/command';
import {
  EmbedBuilder,
  GuildTextBasedChannel,
  Message,
  ActionRowBuilder,
  ButtonBuilder,
  ButtonStyle,
} from 'discord.js';
import { replyEmbedWFooter, replyWithEmbed, sendWithEmbed } from '../utils/embedHelper';
import { setInitiator } from '../utils/sessionStore';
import { Events, Playlist, Song } from 'distube';
import { getPluginForUrl } from '../utils/getPluginNameForUrl';
import { getEstimatedWaitTime, getQueuePosition, getUpcomingPosition } from '../utils/queueEstimate';

const playleave: Command = {
  name: 'playleave',
  description: 'Ph√°t b√†i h√°t ho·∫∑c playlist vaÃÄ r·ªùi kh·ªèi k√™nh tho·∫°i sau khi k·∫øt th√∫c.',
  usage: 'b!playleave <song name or URL>',
  category: 'music',
  aliases: ['pl', 'pleave'],
  async execute(message: Message, args: string[], distube) {
    const query = args.join(' ');
    if (!query) {
      await replyWithEmbed(message, 'error', 'Vui l√≤ng nh·∫≠p b√†i h√°t ho·∫∑c URL.');
      return;
    }

    const vc = message.member?.voice.channel;
    if (!vc) {
      await replyWithEmbed(message, 'error', 'B·∫°n c·∫ßn tham gia k√™nh tho·∫°i tr∆∞·ªõc.');
      return;
    }

    setInitiator(message.guildId!, message.author.id);

    try {
      const plugin = await getPluginForUrl(distube, query);
      const songOrPlaylist = await plugin.resolve(query, {});

      let queue = distube.getQueue(message);

      distube.play(vc, songOrPlaylist, { member: message.member!, textChannel: message.channel as GuildTextBasedChannel });

      const controlRow = new ActionRowBuilder<ButtonBuilder>().addComponents(
        new ButtonBuilder()
          .setCustomId('pause')
          .setLabel('‚èØ Pause')
          .setStyle(ButtonStyle.Secondary),
        new ButtonBuilder()
          .setCustomId('skip')
          .setLabel('‚è≠ Skip')
          .setStyle(ButtonStyle.Secondary),
        new ButtonBuilder()
          .setCustomId('stop')
          .setLabel('‚èπ Stop')
          .setStyle(ButtonStyle.Danger),
        new ButtonBuilder()
          .setCustomId('loop')
          .setLabel('üîÅ Loop')
          .setStyle(ButtonStyle.Primary),
        new ButtonBuilder()
          .setCustomId('shuffle')
          .setLabel('üîÄ Shuffle')
          .setStyle(ButtonStyle.Primary),
      );

      const embed = new EmbedBuilder()
        .setColor(0x1DB954)
        .addFields(
          {
            name: 'üìå Danh s√°ch ph√°t',
            value: `[${songOrPlaylist.name}](${songOrPlaylist.url})`,
          },
          {
            name: 'üìä ƒê·ªô d√†i danh s√°ch ph√°t',
            value: songOrPlaylist.formattedDuration,
            inline: true,
          },
          {
            name: 'üéµ Danh s√°ch',
            value: songOrPlaylist instanceof Playlist ? `${songOrPlaylist.songs.length}` : `1`,
            inline: true,
          },
          {
            name: '‚è≥ Th·ªùi gian ∆∞·ªõc t√≠nh cho ƒë·∫øn khi ph√°t',
            value: getEstimatedWaitTime(queue),
            inline: false,
          },
          {
            name: 'üìç S·ªë b√†i h√°t c√≤n l·∫°i t·ªõi khi ph√°t',
            value: getUpcomingPosition(queue),
            inline: true,
          },
          {
            name: 'üì¶ V·ªã tr√≠ trong h√†ng ch·ªù',
            value: getQueuePosition(queue),
            inline: true,
          },
        );

      if (songOrPlaylist instanceof Playlist) {
        if (!queue || queue.songs.length === 0) {
          embed.setTitle('üé∂ ƒêang ph√°t playlist');
          embed.setThumbnail(songOrPlaylist.songs[0]?.thumbnail || '');
        } else {
          embed.setTitle('üé∂ ƒê√£ th√™m playlist');
          embed.setThumbnail(songOrPlaylist.songs[0]?.thumbnail || '');
        }
      } else {
        if (!queue || queue.songs.length === 0) {
          embed.setTitle('üé∂ ƒêang ph√°t b√†i h√°t');
          embed.setThumbnail(songOrPlaylist.thumbnail || '');
        } else {
          embed.setTitle('üé∂ ƒê√£ th√™m b√†i h√°t');
          embed.setThumbnail(songOrPlaylist?.thumbnail || '');
        }
      }

      const reply = await replyEmbedWFooter(message, embed, controlRow);
      const collector = reply.createMessageComponentCollector({
        time: 60_000 * 5, // 5 minutes
      });

      collector.on('collect', async (interaction) => {
        if (interaction.user.id !== message.author.id) {
          return interaction.reply({
            content: '‚õî B·∫°n kh√¥ng th·ªÉ ƒëi·ªÅu khi·ªÉn nh·∫°c n√†y.',
            ephemeral: true,
          });
        }

        const queue = distube.getQueue(message);
        if (!queue) return interaction.reply({ content: 'üö´ Kh√¥ng c√≥ nh·∫°c ƒëang ph√°t.', ephemeral: true });

        switch (interaction.customId) {
          case 'pause':
            if (queue.paused) {
              queue.resume();
              await interaction.reply({ content: '‚ñ∂Ô∏è ƒê√£ ti·∫øp t·ª•c ph√°t.', ephemeral: true });
            } else {
              queue.pause();
              await interaction.reply({ content: '‚è∏ ƒê√£ t·∫°m d·ª´ng ph√°t.', ephemeral: true });
            }
            break;

          case 'skip':
            queue.skip();
            await interaction.reply({ content: '‚è≠ ƒê√£ chuy·ªÉn b√†i.', ephemeral: true });
            break;

          case 'stop':
            queue.stop();
            await interaction.reply({ content: 'üõë ƒê√£ d·ª´ng ph√°t nh·∫°c.', ephemeral: true });
            break;

          case 'loop':
            const mode = queue.repeatMode === 0 ? 1 : 0;
            queue.setRepeatMode(mode);
            await interaction.reply({
              content: mode ? 'üîÅ ƒê√£ b·∫≠t l·∫∑p l·∫°i b√†i h√°t.' : '‚û°Ô∏è ƒê√£ t·∫Øt l·∫∑p l·∫°i.',
              ephemeral: true,
            });
            break;
        }
      });

      // Optional safety: auto leave after current song
      const leaveListener = (queue: any, finishedSong?: any) => {
        if (queue.url === songOrPlaylist.url && songOrPlaylist instanceof Playlist) {
          queue.voice.leave();
          sendWithEmbed(message.channel as GuildTextBasedChannel, 'success', 'Ph√°t xong playlist, ƒë√£ r·ªùi k√™nh tho·∫°i.');
        }

        if (finishedSong && finishedSong.url === songOrPlaylist.url && songOrPlaylist instanceof Song) {
          queue.voice.leave();
          sendWithEmbed(message.channel as GuildTextBasedChannel, 'success', 'Ph√°t xong b√†i, ƒë√£ r·ªùi k√™nh tho·∫°i.');
        }
      };

      distube.addListener(Events.FINISH, leaveListener);
      distube.addListener(Events.FINISH_SONG, leaveListener);

    } catch (e) {
      console.error('L·ªói khi ph√°t v√† r·ªùi k√™nh:', e);
      await replyWithEmbed(message, 'error', 'Kh√¥ng th·ªÉ ph√°t b√†i h√°t.');
    }
  },
};

export = playleave;
