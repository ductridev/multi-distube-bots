// src/commands/play.js
/* 
  Command: play
  Description: Plays a song or adds it to the queue.
  Usage: b!play <song name or URL>
  Category: music
  Aliases: p
*/

import { ExtractorPlugin, Playlist, Song } from 'distube';
import { Command } from '../../@types/command';
import {
  EmbedBuilder,
  GuildTextBasedChannel,
  Message,
  ActionRowBuilder,
  ButtonBuilder,
  ButtonStyle,
} from 'discord.js';
import { replyEmbedWFooter, replyWithEmbed } from '../../utils/embedHelper';
import { setInitiator } from '../../utils/sessionStore';
import { getEstimatedWaitTime, getQueuePosition, getUpcomingPosition } from '../../utils/queueEstimate';
import { QueueSessionModel } from '../../models/QueueSession';
import { RecentTrackModel } from '../../models/RecentTrack';
import { saveLimitedArray } from '../../utils/mongoArrayLimiter';
import { sleep } from '../../utils/sleep';
import { getSongOrPlaylist } from '../../utils/getSongOrPlaylist';
import { canBotJoinVC } from '../../utils/voicePermission';

const play: Command = {
  name: 'play',
  description: 'Ph√°t b√†i h√°t ho·∫∑c th√™m b√†i h√°t v√†o h√†ng ƒë·ª£i.',
  usage: 'b!play <song name or URL>',
  category: 'music',
  aliases: ['p'],
  async execute(message: Message, args: string[], distube) {
    try {
      const query = args.join(' ');
      if (!query) {
        await replyWithEmbed(message, 'error', 'Vui l√≤ng nh·∫≠p t√™n b√†i h√°t ho·∫∑c ƒë∆∞·ªùng d·∫´n URL.');
        return;
      }

      const vc = message.member?.voice.channel;
      if (!vc) {
        await replyWithEmbed(message, 'error', 'B·∫°n c·∫ßn tham gia m·ªôt k√™nh tho·∫°i tr∆∞·ªõc.');
        return;
      }

      const error = canBotJoinVC(vc, message.client.user!.id);
      if (error) {
        await replyWithEmbed(message, 'error', error);
        return;
      }

      setInitiator(message.guildId!, vc.id, message.author.id);

      try {
        const songOrPlaylist = await getSongOrPlaylist(distube, query);

        if (songOrPlaylist instanceof Playlist && songOrPlaylist.songs.length === 0) {
          await replyWithEmbed(message, 'error', 'Kh√¥ng th·ªÉ ph√°t playlist n√†y.');
          return;
        } else if (songOrPlaylist instanceof Song && songOrPlaylist.duration === 0) {
          await replyWithEmbed(message, 'error', 'Kh√¥ng th·ªÉ ph√°t b√†i h√°t n√†y.');
          return;
        } else if (!songOrPlaylist) {
          await replyWithEmbed(message, 'error', 'Kh√¥ng t√¨m th·∫•y b√†i h√°t n√†o ph√π h·ª£p.');
          return;
        }

        if (!songOrPlaylist.url) {
          await replyWithEmbed(message, 'error', 'Kh√¥ng th·ªÉ ph√°t b√†i h√°t ho·∫∑c playlist n√†y.');
          return;
        }

        // Save session
        saveLimitedArray(QueueSessionModel, message.author.id, 'urls', songOrPlaylist.url);

        // Save recent track
        saveLimitedArray(RecentTrackModel, message.author.id, 'tracks', songOrPlaylist.url);

        let queue = distube.getQueue(message);

        if (!queue) {
          queue = await distube.queues.create(vc, message.channel as GuildTextBasedChannel)
        }

        queue.addToQueue(songOrPlaylist instanceof Playlist ? songOrPlaylist.songs : songOrPlaylist);

        if (!queue.playing) {
          queue.play();
        }

        const embed = new EmbedBuilder()
          .setColor(0x1DB954)
          .addFields(
            {
              name: 'üìå Danh s√°ch ph√°t',
              value: `[${songOrPlaylist.name}](${songOrPlaylist.url})`,
            },
            {
              name: 'üìä ƒê·ªô d√†i danh s√°ch ph√°t',
              value: songOrPlaylist.formattedDuration,
              inline: true,
            },
            {
              name: 'üéµ Danh s√°ch',
              value: songOrPlaylist instanceof Playlist ? `${songOrPlaylist.songs.length}` : `1`,
              inline: true,
            },
            {
              name: '‚è≥ Th·ªùi gian ∆∞·ªõc t√≠nh cho ƒë·∫øn khi ph√°t',
              value: getEstimatedWaitTime(queue),
              inline: false,
            },
            {
              name: 'üìç S·ªë b√†i h√°t c√≤n l·∫°i t·ªõi khi ph√°t',
              value: getUpcomingPosition(queue),
              inline: true,
            },
            {
              name: 'üì¶ V·ªã tr√≠ trong h√†ng ch·ªù',
              value: getQueuePosition(queue),
              inline: true,
            },
          );

        const controlRow = new ActionRowBuilder<ButtonBuilder>().addComponents(
          new ButtonBuilder()
            .setCustomId('pause')
            .setLabel('‚èØ Pause')
            .setStyle(ButtonStyle.Secondary),
          new ButtonBuilder()
            .setCustomId('skip')
            .setLabel('‚è≠ Skip')
            .setStyle(ButtonStyle.Secondary),
          new ButtonBuilder()
            .setCustomId('stop')
            .setLabel('‚èπ Stop')
            .setStyle(ButtonStyle.Danger),
          new ButtonBuilder()
            .setCustomId('loop')
            .setLabel('üîÅ Loop')
            .setStyle(ButtonStyle.Primary),
          new ButtonBuilder()
            .setCustomId('shuffle')
            .setLabel('üîÄ Shuffle')
            .setStyle(ButtonStyle.Primary),
        );

        if (songOrPlaylist instanceof Playlist) {
          if (!queue || queue.songs.length === 0) {
            embed.setTitle('üé∂ ƒêang ph√°t playlist');
            embed.setThumbnail(songOrPlaylist.songs[0]?.thumbnail || '');
          } else {
            embed.setTitle('üé∂ ƒê√£ th√™m playlist');
            embed.setThumbnail(songOrPlaylist.songs[0]?.thumbnail || '');
          }
        } else {
          if (!queue || queue.songs.length === 0) {
            embed.setTitle('üé∂ ƒêang ph√°t b√†i h√°t');
            embed.setThumbnail(songOrPlaylist.thumbnail || '');
          } else {
            embed.setTitle('üé∂ ƒê√£ th√™m b√†i h√°t');
            embed.setThumbnail(songOrPlaylist?.thumbnail || '');
          }
        }

        const reply = await replyEmbedWFooter(message, embed, controlRow);
        const collector = reply.createMessageComponentCollector({
          time: 60_000 * 5, // 5 minutes
        });

        collector.on('collect', async (interaction) => {
          if (interaction.user.id !== message.author.id) {
            return interaction.reply({
              content: '‚õî B·∫°n kh√¥ng th·ªÉ ƒëi·ªÅu khi·ªÉn nh·∫°c n√†y.',
              ephemeral: true,
            });
          }

          const queue = distube.getQueue(message);
          if (!queue) return interaction.reply({ content: 'üö´ Kh√¥ng c√≥ nh·∫°c ƒëang ph√°t.', ephemeral: true });

          switch (interaction.customId) {
            case 'pause':
              if (queue.paused) {
                queue.resume();
                await interaction.reply({ content: '‚ñ∂Ô∏è ƒê√£ ti·∫øp t·ª•c ph√°t.', ephemeral: true });
              } else {
                queue.pause();
                await interaction.reply({ content: '‚è∏ ƒê√£ t·∫°m d·ª´ng ph√°t.', ephemeral: true });
              }
              break;

            case 'skip':
              if (queue && queue.songs.length > 1) {
                queue.skip();
                await interaction.reply({ content: '‚è≠ ƒê√£ chuy·ªÉn b√†i.', ephemeral: true });
              } else {
                queue?.stop();
                await interaction.reply({ content: 'ƒê√£ b·ªè qua b√†i h√°t cu·ªëi c√πng.', ephemeral: true });
              }
              break;

            case 'stop':
              queue.voice.leave();
              await queue.stop();
              await interaction.reply({ content: 'üõë ƒê√£ d·ª´ng ph√°t nh·∫°c.', ephemeral: true });
              break;

            case 'loop':
              const mode = queue.repeatMode === 0 ? 1 : 0;
              queue.setRepeatMode(mode);
              await interaction.reply({
                content: mode ? 'üîÅ ƒê√£ b·∫≠t l·∫∑p l·∫°i b√†i h√°t.' : '‚û°Ô∏è ƒê√£ t·∫Øt l·∫∑p l·∫°i.',
                ephemeral: true,
              });
              break;
            case 'shuffle':
              queue.shuffle();
              await interaction.reply({ content: 'üîÄ ƒê√£ x√°o tr·ªôn h√†ng ch·ªù.', ephemeral: true });
              break;
          }
        });
      } catch (err) {
        console.error('L·ªói khi ph√°t nh·∫°c:', err);
        if (err instanceof Error && err.message.includes('Unsupported URL')) await replyWithEmbed(message, 'error', 'URL kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£.');
        else await replyWithEmbed(message, 'error', 'Kh√¥ng th·ªÉ ph√°t b√†i h√°t.');

        await sleep(5000);
      }
    } catch (err) {
      console.error(err);
      // Do nothing
    }
  },
};

export = play;
